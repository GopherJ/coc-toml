{
  "name": "coc-toml",
  "version": "0.1.4",
  "description": "toml extension for coc-nvim",
  "author": "kkiyama117 <k.kiyama117@gmail.com>",
  "publisher": "kkiyama117 <k.kiyama117@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "toml"
  ],
  "repository": {
    "url": "https://github.com/kkiyama117/coc-toml"
  },
  "bugs": {
    "url": "https://github.com/kkiyama117/coc-toml/issues"
  },
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  },
  "preview": true,
  "engines": {
    "coc": "^0.0.77"
  },
  "scripts": {},
  "prettier": {
    "singleQuote": true,
    "printWidth": 80,
    "semi": true
  },
  "dependencies": {
    "deep-equal": "^2.0.5",
    "node-fetch": "^2.6.1"
  },
  "activationEvents": [
    "onLanguage:toml",
    "onLanguage:cargoLock",
    "onCommand:coc-toml.showTomlAsJson",
    "onCommand:coc-toml.syntaxTree"
  ],
  "contributes": {
    "grammars": [
      {
        "language": "toml",
        "scopeName": "source.toml",
        "path": "./toml.tmLanguage.json"
      }
    ],
    "languages": [
      {
        "id": "toml",
        "aliases": [
          "TOML"
        ],
        "extensions": [
          ".toml"
        ],
        "filenames": [
          "Cargo.lock"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "commands": [
      {
        "command": "coc-toml.copyTomlAsJson",
        "title": "TOML: Copy Selection as JSON",
        "enablement": "editorHasSelection"
      },
      {
        "command": "coc-toml.pasteTomlAsJson",
        "title": "TOML: Paste as JSON"
      },
      {
        "command": "coc-toml.debug.showSyntaxTree",
        "title": "TOML (debug): Show Syntax Tree",
        "enablement": "editorLangId == toml && config.coc-toml.debug"
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "tomlArrayKey",
        "superType": "variable",
        "description": "Keys of regular arrays."
      },
      {
        "id": "tomlTableKey",
        "superType": "variable",
        "description": "Keys of inline tables."
      }
    ],
    "semanticTokenScopes": [
      {
        "scopes": {
          "tomlArrayKey": [
            "variable.key.array.toml"
          ],
          "tomlTableKey": [
            "variable.key.table.toml"
          ]
        }
      }
    ],
    "configuration": {
      "title": "coc-toml",
      "properties": {
        "coc-toml.activationStatus": {
          "description": "Show a status bar message while the extension is activating.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.taploConfig": {
          "description": "An absolute, or workspace relative path to the Taplo configuration file.",
          "type": "string",
          "scope": "resource"
        },
        "coc-toml.taploConfigEnabled": {
          "description": "Whether to enable the usage of a Taplo configuration file.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.semanticTokens": {
          "description": "Enable semantic tokens for inline table and array keys. If enabled, keys of arrays and inline tables will have the same color as table headers and array of tables headers.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.commands.copyTomlAsJson": {
          "description": "Show the \"Copy Selection as JSON\" command in the palette.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.commands.pasteTomlAsJson": {
          "description": "Show the \"Paste as JSON\" command in the palette.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.alignEntries": {
          "description": "Align consecutive entries vertically.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.formatter.arrayTrailingComma": {
          "description": "Append trailing commas for multi-line arrays.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.arrayAutoExpand": {
          "description": "Expand arrays to multiple lines that exceed the maximum column width.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.arrayAutoCollapse": {
          "description": "Collapse arrays that don't exceed the maximum column width and don't contain comments.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.compactArrays": {
          "description": "Omit white space padding from single-line arrays.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.compactInlineTables": {
          "description": "Omit white space padding from the start and end of inline tables.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.formatter.columnWidth": {
          "description": "Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.",
          "type": "number",
          "minimum": 0,
          "default": 80
        },
        "coc-toml.formatter.indentTables": {
          "description": "Indent based on tables and arrays of tables and their subtables, subtables out of order are not indented.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.formatter.indentString": {
          "description": "The substring that is used for indentation, should be tabs or spaces, but technically can be anything. Uses the IDE setting if not set.",
          "type": [
            "string",
            "null"
          ],
          "scope": "resource",
          "default": null
        },
        "coc-toml.formatter.reorderKeys": {
          "description": "Alphabetically reorder keys that are not separated by empty lines.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.formatter.allowedBlankLines": {
          "description": "Maximum amount of allowed consecutive blank lines. This does not affect the whitespace at the end of the document, as it is always stripped.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 2
        },
        "coc-toml.formatter.trailingNewline": {
          "description": "Add trailing newline at the end of the file if not present.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.formatter.crlf": {
          "description": "Use CRLF for line endings.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.schema.enabled": {
          "description": "Enable completion and validation based on JSON schemas.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "coc-toml.schema.links": {
          "description": "Enable editor links.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "coc-toml.schema.associations": {
          "description": "Document and schema associations.",
          "markdownDescription": "Document and schema associations. \n\n The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. On multiple matches the first one is used in an undefined order. \n\n The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://github.com/tamasfe/taplo/tree/master/taplo-ide/schemas).",
          "type": "object",
          "scope": "resource",
          "default": {
            ".*/Cargo\\.toml": "taplo://cargo@Cargo.toml",
            ".*/pyproject\\.toml": "taplo://python@pyproject.toml",
            ".*/\\.?taplo\\.toml": "taplo://taplo@taplo.toml"
          }
        },
        "coc-toml.extension.actions.schema.addNewBuiltins": {
          "description": "Whether to update new builtin schema associations.",
          "scope": "resource",
          "type": "string",
          "enum": [
            "ask",
            "always",
            "never"
          ],
          "default": "ask"
        },
        "coc-toml.extension.actions.schema.removeOldBuiltins": {
          "description": "Whether to remove old builtin schema associations.",
          "scope": "resource",
          "type": "string",
          "enum": [
            "ask",
            "always",
            "never"
          ],
          "default": "ask"
        },
        "coc-toml.debug": {
          "description": "Enable features to debug the extension.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        }
      }
    }
  }
}
